pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven3.9.6'
    }
    environment {
        SCANNER_HOME = tool 'sonar'
    }
    stages {
        stage('Git checkout') {
            steps {
                git branch: 'dev', credentialsId: 'github-accesss', url: 'https://github.com/Papu-git/Boardgame.git'
            }
        }
        stage('Compile') {
            steps {
                sh "mvn compile"
            }
        }
        stage('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage('File system scan') {
            steps {
                sh "trivy fs --format table -o trivy-fs-report.html ."
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' 
                    $SCANNER_HOME/bin/sonar-scanner \
                    -Dsonar.projectName=BoardGame \
                    -Dsonar.projectKey=BoardGame \
                    -Dsonar.java.binaries=.
                    '''
                }
            }
        }
           stage('SonarQube Qualitygate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-t'
                }
            }
        }
        stage('Build and tag docker image') {
            steps {
              script{
                   withDockerRegistry(credentialsId: 'dockercred', toolName: 'docker') {
                       sh "docker build -t chandan077/boardgame:latest ."
                    }
                }
            }
        }
          stage('Docker image scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html chandan077/boardgame:latest "
            }
        }
        stage('push docker image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'dockercred', toolName: 'docker') {
                        sh "docker push  chandan077/boardgame:latest "
                    }
                }
            }
        }
         stage('Deploy to k8s') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.0.39:6443') {
                   sh "kubectl apply -f deployment-service.yaml"
                }
            }
        }
         stage('verify the deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId: 'k8-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://172.31.0.39:6443') {
                   sh "kubectl get pods"
                   sh "kubectl get svc"
                }
            }
        }
        
    }
    
     post {
    always {
        script {
            def jobName = env.JOB_NAME
            def buildNumber = env.BUILD_NUMBER
            def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
            def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green' : 'red'

            def body = """
                <html>
                <body>
                <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                <h2>${jobName} - Build ${buildNumber}</h2>
                <div style="background-color: ${bannerColor}; padding: 10px;">
                <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                </div>
                <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                </div>
                </body>
                </html>
            """

            emailext (
                subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                body: body,
                to: 'chandancoolboy10@gmail.com',
                from: 'jenkins@example.com',
                replyTo: 'jenkins@example.com',
                mimeType: 'text/html',
                attachmentsPattern: 'trivy-image-report.html'
            )
        }
    }
}

}
